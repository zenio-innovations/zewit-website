{"version":3,"sources":["Images/hero-img.png","Images/grean_leaf.png","Components/Landing.js","Images/Untitled.png","Images/test-imgs/1.jpg","Images/test-imgs/2.jpg","Images/test-imgs/3.jpeg","Images/test-imgs/4.jpeg","Images/test-imgs/5.jpeg","Components/Pred.js","Images/zewit_logo.jpeg","Components/Nav.js","App.js","reportWebVitals.js","index.js"],"names":["Landing","className","src","img1","img2","machine","initial","states","on","next","loadingModel","modelReady","imageReady","showImage","identifying","complete","showResults","check","props","console","log","max","reduce","iMax","x","i","arr","s","Pred","useState","results","setResults","imageURL","setImageURL","model","setModel","imageRef","useRef","inputRef","useReducer","state","event","appState","dispatch","actionButton","action","a","tf","text","current","click","img","fromPixels","resizeNearestNeighbor","toFloat","div","expandDims","output","predict","predictions","Array","from","dataSync","alt","ref","type","accept","capture","onChange","target","files","length","url","URL","createObjectURL","onClick","href","download","img3","img4","img5","style","color","Nav","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","basename","process","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.f5d1caec.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/hero-img.ee06aecc.png\";","export default __webpack_public_path__ + \"static/media/grean_leaf.e92948e2.png\";","import React from 'react'\r\nimport './landing.css'\r\nimport img1 from '../Images/hero-img.png'\r\nimport img2 from '../Images/grean_leaf.png'\r\nconst Landing = () => {\r\n    return (\r\n        <div className='landing'>\r\n            <span className='Zew-it'>ZeW-IT</span>\r\n            <span className='RTF'>R E T H I N K T H E F U T U R E</span>\r\n            <img className='img1' src={img1} />\r\n            <img className='img2' src={img2} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Landing\r\n","export default __webpack_public_path__ + \"static/media/Untitled.e336ab15.png\";","export default __webpack_public_path__ + \"static/media/1.28365e13.jpg\";","export default __webpack_public_path__ + \"static/media/2.c0b660c6.jpg\";","export default __webpack_public_path__ + \"static/media/3.25190c48.jpeg\";","export default __webpack_public_path__ + \"static/media/4.6f41cc9d.jpeg\";","export default __webpack_public_path__ + \"static/media/5.75f429c9.jpeg\";","import React, { useState, useRef, useReducer } from \"react\";\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport './Pred.css'\r\nimport img from '../Images/Untitled.png'\r\nimport img1 from '../Images/test-imgs/1.jpg'\r\nimport img2 from '../Images/test-imgs/2.jpg'\r\nimport img3 from '../Images/test-imgs/3.jpeg'\r\nimport img4 from '../Images/test-imgs/4.jpeg'\r\nimport img5 from '../Images/test-imgs/5.jpeg'\r\nconst machine = {\r\n    initial: \"initial\",\r\n    states: {\r\n        initial: { on: { next: \"loadingModel\" } },\r\n        loadingModel: { on: { next: \"modelReady\" } },\r\n        modelReady: { on: { next: \"imageReady\" } },\r\n        imageReady: { on: { next: \"identifying\" }, showImage: true },\r\n        identifying: { on: { next: \"complete\" } },\r\n        complete: { on: { next: \"modelReady\" }, showImage: true, showResults: true }\r\n    }\r\n};\r\n\r\nfunction check(props) {\r\n    console.log('props ')\r\n    console.log(props)\r\n    var max = props.reduce((iMax, x, i, arr) => x > arr[iMax] ? i : iMax, 0);\r\n    let s = ['metal', 'cardboard', 'glass', 'plastic', 'paper', 'Trash']\r\n    console.log(s[max])\r\n    return <h1>{s[max]}</h1>\r\n}\r\nconst Pred = () => {\r\n\r\n    const [results, setResults] = useState([]);\r\n    const [imageURL, setImageURL] = useState(null);\r\n    const [model, setModel] = useState(null);\r\n    const imageRef = useRef();\r\n    const inputRef = useRef();\r\n\r\n    const reducer = (state, event) =>\r\n        machine.states[state].on[event] || machine.initial;\r\n\r\n    const [appState, dispatch] = useReducer(reducer, machine.initial);\r\n    const next = () => dispatch(\"next\");\r\n\r\n    const loadModel = async () => {\r\n        next();\r\n        const model = await tf.loadLayersModel('https://raw.githubusercontent.com/zenio-innovations/ZeW-IT-Hack-CBS/master/models/model/tensorflow.js/model.json');\r\n        setModel(model);\r\n        next();\r\n    };\r\n\r\n    const identify = async () => {\r\n        next();\r\n        await tf.tidy(() => {\r\n\r\n\r\n            // Convert the canvas pixels to a Tensor of the matching shape\r\n            let img = tf.browser.fromPixels(imageRef.current, 3).resizeNearestNeighbor([300, 300]).toFloat().div(255).expandDims();\r\n            console.log(imageRef.current)\r\n            //img = img.reshape([1, 300, 300, 3]);\r\n            //img = tf.cast(img, 'float32');\r\n\r\n            // Make and format the predications\r\n            const output = model.predict(img);\r\n\r\n            // Save predictions on the component\r\n            const predictions = Array.from(output.dataSync());\r\n            setResults(predictions);\r\n            console.log(predictions)\r\n\r\n        });\r\n        //const results = await model.classify(imageRef.current);\r\n        next();\r\n    };\r\n\r\n    const reset = async () => {\r\n        setResults([]);\r\n        next();\r\n    };\r\n\r\n    const upload = () => inputRef.current.click();\r\n\r\n    const handleUpload = event => {\r\n        const { files } = event.target;\r\n        if (files.length > 0) {\r\n            const url = URL.createObjectURL(event.target.files[0]);\r\n            setImageURL(url);\r\n            next();\r\n        }\r\n    };\r\n\r\n    const actionButton = {\r\n        initial: { action: loadModel, text: \"Load Model\" },\r\n        loadingModel: { text: \"Loading Model...\" },\r\n        modelReady: { action: upload, text: \"Upload Image\" },\r\n        imageReady: { action: identify, text: \"Identify Type of Waste\" },\r\n        identifying: { text: \"Identifying...\" },\r\n        complete: { action: reset, text: \"Reset\" }\r\n    };\r\n\r\n    const { showImage, showResults } = machine.states[appState];\r\n\r\n    return (\r\n        <div className='pred' >\r\n            <div className='bin-upload'>\r\n                {showImage && <img className='img' src={imageURL} alt=\"upload-preview\" ref={imageRef} />}\r\n                <input\r\n                    type=\"file\"\r\n                    accept=\"image/*\"\r\n                    capture=\"camera\"\r\n                    onChange={handleUpload}\r\n                    ref={inputRef}\r\n                />\r\n                {showResults && (\r\n                    <ul>\r\n                        {check(results)}\r\n                    </ul>\r\n                )}\r\n                <button onClick={actionButton[appState].action || (() => { })}>\r\n                    {actionButton[appState].text}\r\n                </button>\r\n            </div>\r\n            <img className={`${actionButton[appState].text == 'Load Model' ? 'bin-img' : 'bin-img bin-img2'} `} src={img} />\r\n            <div className='Carcel'>\r\n                <div className='asd'>\r\n                    <a href={img1} download className='car'><img src={img1} className='car' /></a>\r\n                    <a href={img2} download className='car'><img src={img2} className='car' /></a>\r\n                    <a href={img3} download className='car'><img src={img3} className='car' /></a>\r\n                    <a href={img4} download className='car'><img src={img4} className='car' /></a>\r\n                    <a href={img5} download className='car'><img src={img5} className='car' /></a>\r\n                </div>\r\n                <p style={{ color: '#000000' }}>Click on the images to download</p>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Pred\r\n","export default __webpack_public_path__ + \"static/media/zewit_logo.df2e8f24.jpeg\";","import React from 'react'\r\nimport './Nav.css'\r\nimport img from '../Images/zewit_logo.jpeg'\r\nconst Nav = () => {\r\n    return (\r\n\r\n        <header className='navbar'>\r\n            <div className='navbar__title navbar__item'><img src={img} /></div>\r\n            <div className='navbar__item aaa bbb'>About Us</div>\r\n            <div className='navbar__item bbb'>Sponsor</div>\r\n            <div className='navbar__item bbb'>Tensorflow Model</div>\r\n        </header>\r\n\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react'\r\nimport \"./App.css\";\r\nimport {\r\n  BrowserRouter,\r\n  Link,\r\n  Route,\r\n  Switch,\r\n} from 'react-router-dom'\r\nimport Landing from './Components/Landing'\r\nimport Pred from './Components/Pred'\r\nimport Nav from './Components/Nav'\r\nconst App = () => {\r\n  return (\r\n    <>\r\n    \r\n      <Nav />\r\n      <Landing />\r\n      <Pred />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {\n  BrowserRouter,\n  Link,\n  Route,\n  Switch,\n} from 'react-router-dom'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render((\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n     <Switch>\n          <Route exact path=\"/\" component={ App } />\n  </Switch>\n</BrowserRouter>),\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n//  <App />"],"sourceRoot":""}